---
import DefaultLayout from "@layouts/DefaultLayout.astro"
import Pagination from "@components/Pagination.astro"
import PostItem from "@components/PostItem.astro"

export async function getStaticPaths({ paginate, rss }) {
	const allPosts = await Astro.glob("./*.md")
	const sortedPosts = allPosts.sort(
		(a, b) =>
			new Date(b.frontmatter.date.published).valueOf() -
			new Date(a.frontmatter.date.published).valueOf()
	)

	// Return a paginated collection of paths for all posts
	return paginate(sortedPosts, { pageSize: 5 })
}

let title = "Blog"
let description = "Posts for Xenon"
// let canonicalURL = Astro.canonicalURL;

const { canonicalURL } = Astro
const { page } = Astro.props
---

<DefaultLayout {title} {description} {canonicalURL}>
	<div class="main-content">
		<div class="main-figure"></div>
		<div class="main-header">
			<h1 class="main-title font-size-display">{title}</h1>
		</div>
		<div class="main-body section-3xl">
			<ul class="post-list" role="list">
				{page.data.map((post) => (
					<PostItem
						url={post.url}
						title={post.frontmatter.title}
						datePublished={post.frontmatter.date.published}
						image={post.frontmatter.image.path}
						alt={post.frontmatter.image.alt}
						label={post.frontmatter.category}
						description={post.frontmatter.description}
					/>
				))}
			</ul>
		</div>
		
		<footer class="main-footer">
			<Pagination
				prevUrl={page.url.prev}
				nextUrl={page.url.next}
				currentPage={page.currentPage}
				totalPages={page.lastPage}
			/>
		</footer>
	</div>

	

</DefaultLayout>

<style>
	.main-content {
		display: grid;
		grid-template-rows: auto auto;
	}
	.main-body {
		background-color: var(--color-background);
	}

	:global(.main-body > *) {
		max-width: calc(var(--breakpoint-sm) - var(--gutter));
	}

	.main-header {
		grid-row: 1;
		grid-column: 1;
		align-self: end;
		padding: var(--gutter) var(--gutter) 1ch 0;
		background-color: var(--color-background);
		max-width: var(--breakpoint-sm);
	}

	.main-figure {
		aspect-ratio: 1/1;
		@media (--viewport-xs) {
			aspect-ratio: 2/1;
		}
		@media (--viewport-md) {
			aspect-ratio: initial;
			height: 50vh;
		}
	}

	.main-figure {
		
		grid-row: 1;
		grid-column: 1;
		z-index: -1;
		--bg-image: url(/images/page-header-dark.svg);
		
		position: sticky;
		top: var(--gutter);
		overflow: hidden;
		background-image: var(--bg-image),
			linear-gradient(
				45deg,
				var(--color-green),
				var(--color-blue),
				var(--color-purple),
				var(--color-red)
			);
		background-blend-mode: soft-light;

		background-repeat: repeat, no-repeat;
		background-attachment: fixed;
		background-size: auto 20%, cover;
	}

	:root[color-scheme="light"] .main-figure {
		--bg-image: url(/images/page-header-light.svg);
	}

	.main-footer {
		max-width: calc(var(--breakpoint-sm) - var(--gutter));
	}

	.post-list {
		display: flex;
		flex-direction: column;
		row-gap: var(--gutter);
	}

	:global(.post-list > *::after) {
		content: "";
		width: 100%;
		border-bottom: var(--border-width-1) solid var(--color-separator);
		display: block;
		grid-column: span 2;
		position: relative;
		left: 0;
		bottom: 0;
	}
</style>
